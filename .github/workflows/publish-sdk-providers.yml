name: Publish NuGet Package (SDK - Providers)

on:
  push:
    branches: [ "main" ]

jobs:
  publish:
    runs-on: ubuntu-latest

    env:
      CONFIGURATION: Release
      DOTNET_VERSION: '9.0.x'
      PROJECT_PATH: ./src/JotaSystem.Sdk.Providers/JotaSystem.Sdk.Providers.csproj
      TEST_PROJECT_PATH: ./tests/JotaSystem.Sdk.Providers.Tests/JotaSystem.Sdk.Providers.Tests.csproj
      ARTIFACTS_PATH: ./artifacts

    steps:
      - name: 1Ô∏è‚É£ Checkout do c√≥digo
        uses: actions/checkout@v4

      - name: 2Ô∏è‚É£ Capturar vers√£o e PackageId do .csproj
        id: get_version
        run: |
          version=$(grep -oP "(?<=<Version>).*?(?=</Version>)" "${{ env.PROJECT_PATH }}" | tr -d ' ')
          packageId=$(grep -oP "(?<=<PackageId>).*?(?=</PackageId>)" "${{ env.PROJECT_PATH }}" | tr -d ' ')
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "packageId=$packageId" >> $GITHUB_OUTPUT
          echo "Detected package: $packageId version $version"

      - name: 3Ô∏è‚É£ Verificar se vers√£o j√° existe no NuGet (com retry)
        id: check
        run: |
          package=$(echo "${{ steps.get_version.outputs.packageId }}" | tr '[:upper:]' '[:lower:]')
          version=${{ steps.get_version.outputs.version }}
          max_retries=5
          delay=15
      
          for i in $(seq 1 $max_retries); do
            echo "üîç Tentativa $i de $max_retries..."
            response=$(curl -s "https://api.nuget.org/v3-flatcontainer/${package}/index.json" || echo "")
            if echo "$response" | grep -q "\"$version\""; then
              echo "exists=true" >> $GITHUB_OUTPUT
              echo "üö´ Vers√£o $version j√° existe no NuGet. Encerrando workflow."
              exit 0
            fi
            echo "‚è≥ Vers√£o ainda n√£o dispon√≠vel, aguardando ${delay}s..."
            sleep $delay
          done

          echo "exists=false" >> $GITHUB_OUTPUT
          echo "‚úÖ Vers√£o $version n√£o encontrada, continuando publica√ß√£o..."

      - name: 4Ô∏è‚É£ Setup do .NET
        if: steps.check.outputs.exists == 'false'
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: 5Ô∏è‚É£ Restaurar depend√™ncias
        if: steps.check.outputs.exists == 'false'
        run: dotnet restore ${{ env.PROJECT_PATH }}

      - name: 6Ô∏è‚É£ Executar testes
        if: steps.check.outputs.exists == 'false'
        run: dotnet test ${{ env.TEST_PROJECT_PATH }} --configuration ${{ env.CONFIGURATION }}

      - name: 7Ô∏è‚É£ Build do projeto
        if: steps.check.outputs.exists == 'false'
        run: dotnet build ${{ env.PROJECT_PATH }} --configuration ${{ env.CONFIGURATION }}

      - name: 8Ô∏è‚É£ Pack do projeto (somente se vers√£o n√£o existe)
        if: steps.check.outputs.exists == 'false'
        run: dotnet pack ${{ env.PROJECT_PATH }} --configuration ${{ env.CONFIGURATION }} -o ${{ env.ARTIFACTS_PATH }}

      - name: 9Ô∏è‚É£ Publicar no NuGet (somente se vers√£o n√£o existe)
        if: steps.check.outputs.exists == 'false'
        run: |
          if compgen -G "${{ env.ARTIFACTS_PATH }}/*.nupkg" > /dev/null; then
            echo "Publicando pacotes NuGet..."
            dotnet nuget push "${{ env.ARTIFACTS_PATH }}/*.nupkg" --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
          else
            echo "Nenhum pacote .nupkg encontrado em ${{ env.ARTIFACTS_PATH }}"
            exit 1
          fi
